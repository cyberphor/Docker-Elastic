services:
  elasticsearch:
    build: elasticsearch
    image: elasticsearch:latest
    container_name: elasticsearch
    env_file:
      - .env
    volumes:
      - certs:/usr/share/elasticsearch/config/certs/
    networks: 
      elastic:
        ipv4_address: ${ELASTICSEARCH_IP}
    ports:
      - ${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT} 
    extra_hosts:
      - "elasticsearch:${ELASTICSEARCH_IP}"
    healthcheck:
      test: ["CMD-SHELL", "curl ${ELASTICSEARCH_HOSTS} --cacert ${ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES} -u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"]
      start_period: 30s
      retries: 2
  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    build: kibana
    image: kibana:latest
    container_name: kibana
    env_file:
      - .env
    volumes:
      - certs:/usr/share/kibana/config/certs/
    ports:
      - ${KIBANA_PORT}:${KIBANA_PORT}
    healthcheck:
      # current healthcheck until HTTPS is enabled/enforced when accessing Kibana
      # TODO: address accepting "self-signed" certificate notification when accessing HTTPS-enabled Kibana
      test: [ "CMD-SHELL", "curl http://${KIBANA_IP}:${KIBANA_PORT} -I -s | grep -q 'HTTP/1.1 302 Found'", ]
    networks: 
      elastic:
        ipv4_address: ${KIBANA_IP}
    extra_hosts:
      - "elasticsearch:${ELASTICSEARCH_IP}"
  #logstash:
  #  depends_on: 
  #    kibana:
  #      condition: "service_healthy"
  #  build: logstash
  #  image: logstash:latest
  #  container_name: logstash
  #  env_file:
  #    - .env
  #  volumes:
  #    - certs:/opt/logstash/config/certs/
  #  networks: 
  #    elastic:
  #      ipv4_address: ${LOGSTASH_IP}
  #  extra_hosts:
  #    - "elasticsearch:${ELASTICSEARCH_IP}"
  #elastalert:
  #  depends_on: 
  #    logstash:
  #      condition: "service_healthy"
  #  build: elastalert
  #  image: elastalert:latest
  #  container_name: elastalert
  #  env_file:
  #    - .env
  #  volumes:
  #    - certs:/opt/elastalert/certs/
  #  networks: 
  #    elastic:
  #      ipv4_address: ${ELASTALERT_IP}
  #  extra_hosts:
  #    - "elasticsearch:${ELASTICSEARCH_IP}"
volumes:
  certs:
    name: certs
networks:
  elastic:
    name: elastic
    ipam: 
      config: 
        - subnet: ${SUBNET}